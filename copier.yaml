---
# questions
resource_name:
  type: str
  help: the name of your custom resource type?
  validator: >-
    {% if not (resource_name | regex_search('^[A-Z][a-zA-Z0-9]+$')) %}
    Must be a CloudFormation logical name, only letter and digits. excluding Custom::
    {% endif %}

resource_type_name:
  type: str
  help: the full custom resource type name in CloudFormation. just press return.
  default: "Custom::{{resource_name}}"
  when: false
  validator: >-
    {% if resource_type_name != ("Custom::" + resource_name) %}
    The type name must be Custom::{{resource_name}}.
    {% endif %}

resource_package_name:
  type: str
  help: The name of your resource file?
  default: >-
    {{ resource_name |
    regex_replace('(.)([A-Z][a-z]+)', '\\1_\\2') |
    regex_replace('([a-z0-9])([A-Z])', '\\1_\\2') | lower }}
  validator: >-
    {% if not (resource_package_name|regex_search('^[a-z][a-z0-9_]+$')) %}
    must be all lowercase letters or digits or underscores.
    {% endif %}


project_name:
  type: str
  help: The name of your resource provider?
  default: >-
    cfn-{{ resource_name |
    regex_replace('(.)([A-Z][a-z]+)', '\\1-\\2') |
    regex_replace('([a-z0-9])([A-Z])', '\\1-\\2') | lower }}-provider
  validator: >-
    {% if not (project_name|regex_search('^[a-z][a-z0-9-]+$')) %}
    must be all lowercase letters or digits with optional dashes.
    {% endif %}

description:
  type: str
  help: a short description for the custom provider?
  default: >-
    manages {{resource_name |
    regex_replace('(.)([A-Z][a-z]+)', '\\1 \\2') |
    regex_replace('([a-z0-9])([A-Z])', '\\1 \\2') |
    lower}}s

golang_version:
  type: str
  help: golang version to use
  default: '1.20'
  choices:
    - '1.20'

author:
  type: str
  help: Your full name?
  validator: |
    {% if not author.strip() %}
    Slightly more than nothing would be awesome!
    {% endif %}

author_email:
  type: str
  help: Your email address?
  validator: |
    {% if not (author_email | regex_search('([A-Za-z0-9]+[.-_])*[A-Za-z0-9]+@[A-Za-z0-9-]+(\\.[A-Z|a-z]{2,})+')) %}
    Must be an email address.
    {% endif %}


go_module_name:
  type: str
  help: the go module name
  default: >-
    github.com/{{ author_email | regex_replace('[^@]*@', '') | regex_replace('\\.', '-')}}/{{project_name}}

url:
  type: str
  help: the URL to git source repository?
  default: >-
    https:/{{go_module_name}}.git

executable_name:
  type: str
  help: the golang executable name
  when: false
  default: >-
    {{ url | regex_replace('[^/]*/', '') | regex_replace('\\.git$','') }}

aws_region:
  type: str
  help: the AWS region name
  default: eu-central-1
  validator: >-
    {% if not (aws_region | regex_search('^[a-z]{2}-[a-z]+-[0-9]$')) %}
    specify an AWS region name, like eu-central-1 or ap-southeast-2.
    {% endif %}

s3_bucket_prefix:
  type: str
  help: prefix for the S3 bucket name to store the lambda zipfiles?
  validator: >-
    {% if not (s3_bucket_prefix | regex_search('^[a-zA-Z][a-zA-Z0-9\-_]*$')) %}
    bucket name prefix must start with a letter, and only contain letters, digits, underscore and dash.
    {% endif %}

s3_object_acl:
  type: str
  help: Access to lambda zip files?
  choices:
    private: private
    public: public-read

_skip_if_exists:
  - tests/**
  - 'src/{{module_name}}/**'
  - 'cloudformation/demo*'
  - 'cloudformation/{{project_name}}.yaml'
  - README.md
  - .release
  - '*.go'
  - 'go.*'

_exclude:
  - copier.yaml
  - ~*
  - __pycache__
  - .DS_Store
  - .git
  - .idea
  - build
  - dist
  - bootstrap
  - README.md

_tasks:
  # do a git init
  - >-
    [ ! -f go.sum ] && 
    (go mod download && go get {{go_module_name}} || echo "WARNING: failed to run go get">&2);
    [ ! -d .git ] &&
    ( git init &&
    git add . &&
    git commit -m 'initial import'
    && git tag 0.0.0) || exit 0
